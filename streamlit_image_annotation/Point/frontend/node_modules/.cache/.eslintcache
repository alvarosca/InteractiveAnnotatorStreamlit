[{"/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/index.tsx":"1","/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/PointDet.tsx":"2","/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/ThemeSwitcher.tsx":"3","/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/PointCanvas.tsx":"4","/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/Point.tsx":"5","/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/index.tsx":"6","/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/PointDet.tsx":"7","/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/PointCanvas.tsx":"8","/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/ThemeSwitcher.tsx":"9","/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/Point.tsx":"10","/home/DigPatho/InteractiveAnnotatorStreamlitV5/streamlit_image_annotation/Point/frontend/src/index.tsx":"11","/home/DigPatho/InteractiveAnnotatorStreamlitV5/streamlit_image_annotation/Point/frontend/src/PointDet.tsx":"12","/home/DigPatho/InteractiveAnnotatorStreamlitV5/streamlit_image_annotation/Point/frontend/src/PointCanvas.tsx":"13","/home/DigPatho/InteractiveAnnotatorStreamlitV5/streamlit_image_annotation/Point/frontend/src/ThemeSwitcher.tsx":"14","/home/DigPatho/InteractiveAnnotatorStreamlitV5/streamlit_image_annotation/Point/frontend/src/Point.tsx":"15"},{"size":208,"mtime":1734437217788,"results":"16","hashOfConfig":"17"},{"size":3884,"mtime":1734441244177,"results":"18","hashOfConfig":"17"},{"size":817,"mtime":1734437217788,"results":"19","hashOfConfig":"17"},{"size":3394,"mtime":1734437217788,"results":"20","hashOfConfig":"17"},{"size":1087,"mtime":1734437217788,"results":"21","hashOfConfig":"17"},{"size":208,"mtime":1734437217788,"results":"22","hashOfConfig":"23"},{"size":3883,"mtime":1734462019232,"results":"24","hashOfConfig":"23"},{"size":3394,"mtime":1734437217788,"results":"25","hashOfConfig":"23"},{"size":817,"mtime":1734437217788,"results":"26","hashOfConfig":"23"},{"size":1087,"mtime":1734437217788,"results":"27","hashOfConfig":"23"},{"size":208,"mtime":1734532443169,"results":"28","hashOfConfig":"29"},{"size":4097,"mtime":1734552426644,"results":"30","hashOfConfig":"29"},{"size":3502,"mtime":1734552281654,"results":"31","hashOfConfig":"29"},{"size":817,"mtime":1734532443169,"results":"32","hashOfConfig":"29"},{"size":1087,"mtime":1734532443169,"results":"33","hashOfConfig":"29"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ajsg9w",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tuiw8e",{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1c787fu",{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/index.tsx",[],[],"/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/PointDet.tsx",["82","83"],[],"/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/ThemeSwitcher.tsx",[],[],"/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/PointCanvas.tsx",["84"],[],"import React, { useEffect } from \"react\"\nimport { Layer, Stage, Image } from 'react-konva';\nimport Point from './Point'\nimport Konva from 'konva';\n\nexport interface PointCanvasProps {\n  pointsInfo: any[],\n  mode: string,\n  selectedId: string | null,\n  setSelectedId: any,\n  setPointsInfo: any,\n  setLabel: any,\n  color_map: any,\n  scale: number,\n  label: string,\n  image_size: number[],\n  image: any,\n  strokeWidth: number\n}\nconst PointCanvas = (props: PointCanvasProps) => {\n  const {\n    pointsInfo,\n    mode,\n    selectedId,\n    setSelectedId,\n    setPointsInfo,\n    setLabel,\n    color_map,\n    scale,\n    label,\n    image_size,\n    image,\n    strokeWidth\n  }: PointCanvasProps = props\n  const checkDeselect = (e: any) => {\n    console.log('DOWN')\n    if (!(e.target instanceof Konva.Circle)) {\n      if (selectedId === null) {\n        if (mode === 'Transform') {\n          const pointer = e.target.getStage().getPointerPosition()\n          const points = pointsInfo.slice();\n          const new_id = Date.now().toString()\n          points.push({\n            x: pointer.x / scale,\n            y: pointer.y / scale,\n            label: label,\n            stroke: color_map[label],\n            id: new_id\n          })\n          setPointsInfo(points);\n          setSelectedId(new_id);\n        }\n      } else {\n        setSelectedId(null);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const points = pointsInfo.slice();\n    for (let i = 0; i < points.length; i++) {\n      if (points[i].x < 0 || points[i].y < 0) {\n        points[i].x = Math.max(0, points[i].x)\n        points[i].y = Math.max(0, points[i].y)\n        setPointsInfo(points)\n      }\n      if (points[i].x > image_size[0] || points[i].y > image_size[1]) {\n        points[i].x = Math.min(points[i].x, image_size[0])\n        points[i].y = Math.min(points[i].y, image_size[1])\n        setPointsInfo(points)\n      }\n    }\n    console.log(pointsInfo)\n  }, [pointsInfo, image_size])\n  return (\n    <Stage width={image_size[0] * scale} height={image_size[1] * scale}\n      onMouseDown={checkDeselect}>\n      <Layer>\n        <Image image={image} scaleX={scale} scaleY={scale} />\n      </Layer>\n      <Layer>\n        {pointsInfo.map((point, i) => {\n          return (\n            <Point\n              key={i}\n              rectProps={point}\n              scale={scale}\n              strokeWidth={strokeWidth}\n              isSelected={mode === 'Transform' && point.id === selectedId}\n              onClick={() => {\n                if (mode === 'Transform') {\n                  setSelectedId(point.id);\n                  const points = pointsInfo.slice();\n                  const lastIndex = points.length - 1;\n                  const lastItem = points[lastIndex];\n                  points[lastIndex] = points[i];\n                  points[i] = lastItem;\n                  setPointsInfo(points);\n                  setLabel(point.label)\n                } else if (mode === 'Del') {\n                  const points = pointsInfo.slice();\n                  setPointsInfo(points.filter((element) => element.id !== point.id));\n                }\n              }}\n              onChange={(newAttrs: any) => {\n                const points = pointsInfo.slice();\n                points[i] = newAttrs;\n                setPointsInfo(points);\n              }}\n            />\n          );\n        })}\n      </Layer></Stage>\n  );\n};\n\n\nexport default PointCanvas;","/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/Point.tsx",["85","86","87","88","89"],[],"import React, { useState, useEffect } from \"react\"\nimport { Circle, Rect, Text, Transformer } from 'react-konva';\n\nexport interface RectProps {\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  id: string,\n  stroke: string,\n  label: string,\n}\nexport interface BBoxProps {\n  rectProps: RectProps,\n  onChange: any,\n  isSelected: boolean,\n  onClick: any,\n  scale: number,\n  strokeWidth: number\n}\nconst Point = (props: BBoxProps)=>{\n  const {\n    rectProps, onChange, isSelected, onClick, scale, strokeWidth\n  }: BBoxProps = props\n\n  return (\n    <React.Fragment>\n      <Circle\n        onClick={onClick}\n        {...rectProps}\n        x={rectProps.x * scale}\n        y={rectProps.y * scale}\n        width={strokeWidth*2}\n        height={strokeWidth*2}\n        draggable={isSelected}\n        strokeWidth={isSelected?strokeWidth*3:strokeWidth}\n        onDragEnd={(e) => {\n          onChange({\n            ...rectProps,\n            x: e.target.x() / scale,\n            y: e.target.y() / scale,\n          });\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\n\nexport default Point;","/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/index.tsx",[],[],"/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/PointDet.tsx",["90","91"],[],"/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/PointCanvas.tsx",["92"],[],"/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/ThemeSwitcher.tsx",[],[],"/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/Point.tsx",["93","94","95","96","97"],[],"/home/DigPatho/InteractiveAnnotatorStreamlitV5/streamlit_image_annotation/Point/frontend/src/index.tsx",[],[],"/home/DigPatho/InteractiveAnnotatorStreamlitV5/streamlit_image_annotation/Point/frontend/src/PointDet.tsx",["98","99","100"],[],"/home/DigPatho/InteractiveAnnotatorStreamlitV5/streamlit_image_annotation/Point/frontend/src/PointCanvas.tsx",["101"],[],"import React, { useEffect } from \"react\"\nimport { Layer, Stage, Image } from 'react-konva';\nimport Point from './Point'\nimport Konva from 'konva';\n\nexport interface PointCanvasProps {\n  pointsInfo: any[],\n  mode: string,\n  selectedId: string | null,\n  setSelectedId: any,\n  setPointsInfo: any,\n  setLabel: any,\n  color_map: any,\n  scale: number,\n  label: string,\n  image_size: number[],\n  image: any,\n  strokeWidth: number\n  zoom: number\n}\n\nconst PointCanvas = (props: PointCanvasProps) => {\n  const {\n    pointsInfo,\n    mode,\n    selectedId,\n    setSelectedId,\n    setPointsInfo,\n    setLabel,\n    color_map,\n    scale,\n    label,\n    image_size,\n    image,\n    strokeWidth,\n    zoom\n  }: PointCanvasProps = props\n  \n  const checkDeselect = (e: any) => {\n    if (!(e.target instanceof Konva.Circle)) {\n      if (selectedId === null && mode === 'Transform') {\n        const pointer = e.target.getStage().getPointerPosition()\n        const points = pointsInfo.slice();\n        const new_id = Date.now().toString()\n        points.push({\n          x: pointer.x / (scale*zoom),\n          y: pointer.y / (scale*zoom),\n          label: label,\n          stroke: color_map[label],\n          id: new_id\n        })\n        setPointsInfo(points);\n        setSelectedId(new_id);\n      } else {\n        setSelectedId(null);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const points = pointsInfo.slice();\n    for (let i = 0; i < points.length; i++) {\n      if (points[i].x < 0 || points[i].y < 0) {\n        points[i].x = Math.max(0, points[i].x)\n        points[i].y = Math.max(0, points[i].y)\n        setPointsInfo(points)\n      }\n      if (points[i].x > image_size[0] || points[i].y > image_size[1]) {\n        points[i].x = Math.min(points[i].x, image_size[0])\n        points[i].y = Math.min(points[i].y, image_size[1])\n        setPointsInfo(points)\n      }\n    }\n  }, [pointsInfo, image_size])\n\n  return (\n    <div>\n      <Stage \n        width={image_size[0] * (scale*zoom)}\n        height={image_size[1] * (scale*zoom)}\n        onMouseDown={checkDeselect}\n      >\n        <Layer>\n          <Image image={image} scaleX={(scale*zoom)} scaleY={(scale*zoom)} />\n        </Layer>\n        <Layer>\n          {pointsInfo.map((point, i) => {\n            return (\n              <Point\n                key={i}\n                rectProps={point}\n                scale={(scale*zoom)}\n                strokeWidth={strokeWidth}\n                isSelected={mode === 'Transform' && point.id === selectedId}\n                onClick={() => {\n                  if (mode === 'Transform') {\n                    setSelectedId(point.id);\n                    const points = pointsInfo.slice();\n                    const lastIndex = points.length - 1;\n                    const lastItem = points[lastIndex];\n                    points[lastIndex] = points[i];\n                    points[i] = lastItem;\n                    setPointsInfo(points);\n                    setLabel(point.label)\n                  } else if (mode === 'Del') {\n                    const points = pointsInfo.slice();\n                    setPointsInfo(points.filter((element) => element.id !== point.id));\n                  }\n                }}\n                onChange={(newAttrs: any) => {\n                  const points = pointsInfo.slice();\n                  points[i] = newAttrs;\n                  setPointsInfo(points);\n                }}\n              />\n            );\n          })}\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default PointCanvas;","/home/DigPatho/InteractiveAnnotatorStreamlitV5/streamlit_image_annotation/Point/frontend/src/ThemeSwitcher.tsx",[],[],"/home/DigPatho/InteractiveAnnotatorStreamlitV5/streamlit_image_annotation/Point/frontend/src/Point.tsx",["102","103","104","105","106"],[],{"ruleId":"107","severity":1,"message":"108","line":86,"column":6,"nodeType":"109","endLine":86,"endColumn":18,"suggestions":"110"},{"ruleId":"107","severity":1,"message":"111","line":99,"column":6,"nodeType":"109","endLine":99,"endColumn":18,"suggestions":"112"},{"ruleId":"107","severity":1,"message":"113","line":74,"column":6,"nodeType":"109","endLine":74,"endColumn":30,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":25},{"ruleId":"115","severity":1,"message":"119","line":1,"column":27,"nodeType":"117","messageId":"118","endLine":1,"endColumn":36},{"ruleId":"115","severity":1,"message":"120","line":2,"column":18,"nodeType":"117","messageId":"118","endLine":2,"endColumn":22},{"ruleId":"115","severity":1,"message":"121","line":2,"column":24,"nodeType":"117","messageId":"118","endLine":2,"endColumn":28},{"ruleId":"115","severity":1,"message":"122","line":2,"column":30,"nodeType":"117","messageId":"118","endLine":2,"endColumn":41},{"ruleId":"107","severity":1,"message":"108","line":86,"column":6,"nodeType":"109","endLine":86,"endColumn":18,"suggestions":"123"},{"ruleId":"107","severity":1,"message":"111","line":99,"column":6,"nodeType":"109","endLine":99,"endColumn":18,"suggestions":"124"},{"ruleId":"107","severity":1,"message":"113","line":74,"column":6,"nodeType":"109","endLine":74,"endColumn":30,"suggestions":"125"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":25},{"ruleId":"115","severity":1,"message":"119","line":1,"column":27,"nodeType":"117","messageId":"118","endLine":1,"endColumn":36},{"ruleId":"115","severity":1,"message":"120","line":2,"column":18,"nodeType":"117","messageId":"118","endLine":2,"endColumn":22},{"ruleId":"115","severity":1,"message":"121","line":2,"column":24,"nodeType":"117","messageId":"118","endLine":2,"endColumn":28},{"ruleId":"115","severity":1,"message":"122","line":2,"column":30,"nodeType":"117","messageId":"118","endLine":2,"endColumn":41},{"ruleId":"115","severity":1,"message":"126","line":7,"column":31,"nodeType":"117","messageId":"118","endLine":7,"endColumn":37},{"ruleId":"107","severity":1,"message":"108","line":84,"column":6,"nodeType":"109","endLine":84,"endColumn":18,"suggestions":"127"},{"ruleId":"107","severity":1,"message":"111","line":97,"column":6,"nodeType":"109","endLine":97,"endColumn":18,"suggestions":"128"},{"ruleId":"107","severity":1,"message":"113","line":74,"column":6,"nodeType":"109","endLine":74,"endColumn":30,"suggestions":"129"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":25},{"ruleId":"115","severity":1,"message":"119","line":1,"column":27,"nodeType":"117","messageId":"118","endLine":1,"endColumn":36},{"ruleId":"115","severity":1,"message":"120","line":2,"column":18,"nodeType":"117","messageId":"118","endLine":2,"endColumn":22},{"ruleId":"115","severity":1,"message":"121","line":2,"column":24,"nodeType":"117","messageId":"118","endLine":2,"endColumn":28},{"ruleId":"115","severity":1,"message":"122","line":2,"column":30,"nodeType":"117","messageId":"118","endLine":2,"endColumn":41},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'label_list' and 'use_space'. Either include them or remove the dependency array.","ArrayExpression",["130"],"React Hook useEffect has a missing dependency: 'label_list'. Either include it or remove the dependency array.",["131"],"React Hook useEffect has a missing dependency: 'setPointsInfo'. Either include it or remove the dependency array.",["132"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Rect' is defined but never used.","'Text' is defined but never used.","'Transformer' is defined but never used.",["133"],["134"],["135"],"'Spacer' is defined but never used.",["136"],["137"],["138"],{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"139","fix":"145"},{"desc":"141","fix":"146"},{"desc":"143","fix":"147"},{"desc":"139","fix":"148"},{"desc":"141","fix":"149"},{"desc":"143","fix":"150"},"Update the dependencies array to be: [label_list, pointsInfo, use_space]",{"range":"151","text":"152"},"Update the dependencies array to be: [label_list, pointsInfo]",{"range":"153","text":"154"},"Update the dependencies array to be: [pointsInfo, image_size, setPointsInfo]",{"range":"155","text":"156"},{"range":"157","text":"152"},{"range":"158","text":"154"},{"range":"159","text":"156"},{"range":"160","text":"152"},{"range":"161","text":"154"},{"range":"162","text":"156"},[2535,2547],"[label_list, pointsInfo, use_space]",[2945,2957],"[label_list, pointsInfo]",[1911,1935],"[pointsInfo, image_size, setPointsInfo]",[2533,2545],[2943,2955],[1911,1935],[2409,2421],[2819,2831],[1856,1880]]